animate(p_turns +
transition_reveal(real_time), fps = 20)
#plot total amount of turns speaking thorughout the evening
p_turns <-
speak_turns %>%
group_by(speaker) %>%
mutate(speak_turns_running = cumsum(speak_turns)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_turns_running, color = speaker), size =1) +
geom_text(x = 1500, y = 535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Chris Wallace", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = c(0,.5),
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate #1 2020 \n Turns Speaking") +
ylab("") +
xlab("Debate Time") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000),
labels=c("Control2", "Control", "Treat 1", "Treat 2"))
animate(p_turns +
transition_reveal(real_time), fps = 20)
#plot total amount of turns speaking thorughout the evening
p_turns <-
speak_turns %>%
group_by(speaker) %>%
mutate(speak_turns_running = cumsum(speak_turns)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_turns_running, color = speaker), size =1) +
geom_text(x = 1500, y = 535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Chris Wallace", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate #1 2020 \n Turns Speaking") +
ylab("") +
xlab("Debate Time") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000),
labels=c("Control2", "Control", "Treat 1", "Treat 2"))
animate(p_turns +
transition_reveal(real_time), fps = 20)
#plot total amount of turns speaking thorughout the evening
p_turns <-
speak_turns %>%
group_by(speaker) %>%
mutate(speak_turns_running = cumsum(speak_turns)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_turns_running, color = speaker), size =1) +
geom_text(x = 1500, y = 535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate #1 2020 \n Turns Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000),
labels=c("Control2", "Control", "Treat 1", "Treat 2"))
animate(p_turns +
transition_reveal(real_time), fps = 20)
#plot total amount of turns speaking thorughout the evening
p_turns <-
speak_turns %>%
group_by(speaker) %>%
mutate(speak_turns_running = cumsum(speak_turns)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_turns_running, color = speaker), size =1) +
geom_text(x = 1500, y = 535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate #1 2020 \n # of Turns Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000),
labels=c("Control2", "Control", "Treat 1", "Treat 2"))
animate(p_turns +
transition_reveal(real_time), fps = 20)
#plot total amount of turns speaking thorughout the evening
p_turns <-
speak_turns %>%
group_by(speaker) %>%
mutate(speak_turns_running = cumsum(speak_turns)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_turns_running, color = speaker), size =1) +
geom_text(x = 1500, y = 535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate Sep. 29 2020 \n # of Turns Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000),
labels=c("Control2", "Control", "Treat 1", "Treat 2"))
animate(p_turns +
transition_reveal(real_time), fps = 20)
#plot total amount of turns speaking thorughout the evening
p_turns <-
speak_turns %>%
group_by(speaker) %>%
mutate(speak_turns_running = cumsum(speak_turns)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_turns_running, color = speaker), size =1) +
geom_text(x = 1500, y = 535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate: Sep 29 2020 \n # of Turns Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000),
labels=c("Control2", "Control", "Treat 1", "Treat 2"))
animate(p_turns +
transition_reveal(real_time), fps = 20)
setwd("./Desktop/websites/stock_blog/img/debate1_2020")
getwd()
anim_save("turns_animated.gif")
speak_turns
View(speak_turns)
View(  speak_turns %>%
group_by(speaker) %>%
mutate(speak_turns_running = cumsum(speak_turns)))
#who spoke the most?
all_time %>%
group_by(speaker) %>%
count() %>%
arrange(-n) %>%
ggplot(aes(x = speaker, y = n, fill = speaker)) +
geom_bar(stat = "identity") +
geom_label(aes(label = n),
nudge_y = 20,
fill = "white") +
scale_x_discrete("Speaker",
labels=c("Chris Wallace","Donald Trump","Joe Biden")) +
scale_fill_manual(values = c("grey", "red", "blue")) +
theme_bw() +
ggtitle("Number of Turns Speaking")+
theme(legend.position = "none")
p_turns
#plot total amount of speaking thorughout the evening
speak_length <- all_time %>%
filter(diff_next >= 0) %>%
group_by(speaker, real_time) %>%
summarize(speak_time = sum(diff_next)) %>%
rowwise() %>%
mutate(char_time = str_extract(time_stamp_5, "[0-9]{2}:[0-9]{2}")) %>%
ungroup()
all_time
#plot total amount of speaking thorughout the evening
speak_length <- all_time %>%
filter(diff_next >= 0) %>%
group_by(speaker, real_time) %>%
mutate(speak_time = sum(diff_next)) %>%
rowwise() %>%
mutate(char_time = str_extract(time_stamp_5, "[0-9]{2}:[0-9]{2}")) %>%
ungroup()
speak_length
#plot total amount of speaking thorughout the evening
speak_length <- all_time %>%
filter(diff_next >= 0) %>%
group_by(speaker, real_time) %>%
mutate(speak_time = sum(diff_next)) %>%
rowwise() %>%
mutate(char_time = str_extract(time_stamp_5, "[0-9]{2}:[0-9]{2}")) %>%
ungroup()
speak_length
speak_lenght %>%
View()
speak_length %>%
View()
#plot total amount of speaking thorughout the evening
speak_length <- all_time %>%
filter(diff_next >= 0) %>%
group_by(speaker, real_time,time_stamp_5) %>%
summarize(speak_time = sum(diff_next)) %>%
rowwise() %>%
mutate(char_time = str_extract(time_stamp_5, "[0-9]{2}:[0-9]{2}")) %>%
ungroup()
speak_length
speak_length %>%
group_by(speaker) %>%
mutate(speak_time_running = cumsum(speak_time)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_time_running, color = speaker), size =1) +
geom_text(x = 1500, y = 535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate: Sep 29 2020 \n # of Turns Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000))
speak_length %>%
group_by(speaker) %>%
mutate(speak_time_running = cumsum(speak_time)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_time_running, color = speaker), size =1) +
geom_text(x = 1500, y = 1535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate: Sep 29 2020 \n Total Time Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000))
speak_length %>%
group_by(speaker) %>%
mutate(speak_time_running = cumsum(speak_time)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_time_running, color = speaker), size =1) +
geom_text(x = 1500, y = 1800, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate: Sep 29 2020 \n Total Time Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000))
p_time <-
speak_length %>%
group_by(speaker) %>%
mutate(speak_time_running = cumsum(speak_time)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_time_running, color = speaker), size =1) +
geom_text(x = 1500, y = 1800, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate: Sep 29 2020 \n Total Time Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000))
animate(p_turns +
transition_reveal(real_time), fps = 20)
animate(p_time +
transition_reveal(real_time), fps = 20)
anim_save("time_animated.gif")
p_time <-
speak_length %>%
group_by(speaker) %>%
mutate(speak_time_running = cumsum(speak_time)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_time_running, color = speaker), size =1) +
#geom_text(x = 1500, y = 1800, label = paste0(speak_turns$char_time, " EST"),
#         check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Presidential Debate: Sep 29 2020 \n Total Time Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000))
p_time <-
speak_length %>%
group_by(speaker) %>%
mutate(speak_time_running = cumsum(speak_time)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_time_running, color = speaker), size =1) +
#geom_text(x = 1500, y = 1800, label = paste0(speak_turns$char_time, " EST"),
#         check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("Total Time Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000))
animate(p_time +
transition_reveal(real_time), fps = 20)
anim_save("time_animated.gif")
#plot total amount of turns speaking thorughout the evening
p_turns <-
speak_turns %>%
group_by(speaker) %>%
mutate(speak_turns_running = cumsum(speak_turns)) %>%  #drag the speaking counts
ggplot() +
geom_line(aes(x = real_time, y = speak_turns_running, color = speaker), size =1) +
geom_text(x = 1500, y = 535, label = paste0(speak_turns$char_time, " EST"),
check_overlap = T, size = 10, family = "mono") +
#annotate(geom ="text",x = 500, y = 1000, label = ifelse(speak_turns$speaker == "dt", speak_turns$char_time,"")) +
#  geom_label(aes("8:00")) +
scale_color_manual(values = c("grey", "red", "blue"),
labels = c("Moderator", "Donald Trump", "Joe Biden")) +
theme(
panel.background = element_rect(fill = "#eaeaea"),
panel.border = element_blank(),
panel.grid.major.y = element_line(size = 0.1, color = "black"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#eaeaea"),
plot.title = element_text(size = 20, family = "mono", hjust = 0.5),
legend.title=element_blank(),
legend.background = element_rect(fill = "#eaeaea"),
legend.position = "bottom",
axis.title.x = element_text(family = "mono"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks = element_blank()
) +
#annotate("text", x = 1500, y = 535, label = paste0("Actual Time: 10:50", time_stamp_5), family =("mono")) +
ggtitle("# of Turns Speaking") +
ylab("") +
xlab("") +
scale_x_discrete(breaks=c(0,2000, 4000, 6000))
animate(p_turns +
transition_reveal(real_time), fps = 20)
#setwd("./Desktop/websites/stock_blog/img/debate1_2020")
anim_save("turns_animated.gif")
library(rvest)
script_url <- "https://www.rev.com/blog/transcripts/donald-trump-joe-biden-1st-presidential-debate-transcript-2020"
html <- read_html(script_url)
View(html)
View( html%>%
html_text())
html%>%
html_text()
